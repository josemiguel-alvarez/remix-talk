[
  {
    "slug": "open-closed-principle",
    "title": "Open/Closed Principle in TypeScript",
    "content": "Classes should be open for extension but closed for modification. \n    The idea behind this principle is that existing classes should be extended but not modified. \n    By modifying existing classes you risk breaking code which was already tested and reviewed.\n    The main benefit of this principle is that you can add new features without touching old code. \n    This way you won't break the current usage of those original classes."
  },
  {
    "slug": "single-responsibility-principle",
    "title": "Single Responsibility Principle in TypeScript",
    "content": "A class should have just one reason to change.\n    Every class in our code should be responsible for just a single part of the application. \n    By following this principle we reduce the complexity of our code.\n    If a class is responsible of multiple parts of our app, it will have to be changed frequently. \n    Therefore, changing one part of the class increases the risk of breaking other parts of itself. \n    The solution is to divide it into multiple classes, each one with one responsibility."
  }
]
